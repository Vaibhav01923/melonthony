{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/vaibhav/Documents/Code/Melonthony/melonthony/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from '@tanstack/react-query';\nimport superjson from 'superjson';\nexport function makeQueryClient() {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        // serializeData: superjson.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === 'pending',\n      },\n      hydrate: {\n        // deserializeData: superjson.deserialize,\n      },\n    },\n  });\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAKO,SAAS;IACd,OAAO,IAAI,wNAAW,CAAC;QACrB,gBAAgB;YACd,SAAS;gBACP,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,sCAAsC;gBACtC,sBAAsB,CAAC,QACrB,IAAA,sOAA2B,EAAC,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;YAET;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/vaibhav/Documents/Code/Melonthony/melonthony/src/trpc/client.tsx"],"sourcesContent":["\"use client\";\n// ^-- to make sure we can mount the Provider from a server component\nimport type { QueryClient } from \"@tanstack/react-query\";\nimport superjson from \"superjson\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { createTRPCClient, httpBatchLink } from \"@trpc/client\";\nimport { createTRPCContext } from \"@trpc/tanstack-react-query\";\nimport { useState } from \"react\";\nimport { makeQueryClient } from \"./query-client\";\nimport type { AppRouter } from \"./routers/_app\";\nexport const { TRPCProvider, useTRPC } = createTRPCContext<AppRouter>();\nlet browserQueryClient: QueryClient;\nfunction getQueryClient() {\n  if (typeof window === \"undefined\") {\n    // Server: always make a new query client\n    return makeQueryClient();\n  }\n  // Browser: make a new query client if we don't already have one\n  // This is very important, so we don't re-make a new client if React\n  // suspends during the initial render. This may not be needed if we\n  // have a suspense boundary BELOW the creation of the query client\n  if (!browserQueryClient) browserQueryClient = makeQueryClient();\n  return browserQueryClient;\n}\nfunction getUrl() {\n  const base = (() => {\n    if (typeof window !== \"undefined\") return \"\";\n    return process.env.NEXT_PUBLIC_APP_URL;\n  })();\n  return `${base}/api/trpc`;\n}\n\nexport function TRPCReactProvider(\n  props: Readonly<{\n    children: React.ReactNode;\n  }>\n) {\n  // NOTE: Avoid useState when initializing the query client if you don't\n  //       have a suspense boundary between this and the code that may\n  //       suspend because React will throw away the client on the initial\n  //       render if it suspends and there is no boundary\n  const queryClient = getQueryClient();\n  const [trpcClient] = useState(() =>\n    createTRPCClient<AppRouter>({\n      links: [\n        httpBatchLink({\n          transformer: superjson,\n          url: getUrl(),\n        }),\n      ],\n    })\n  );\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>\n        {props.children}\n      </TRPCProvider>\n    </QueryClientProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAGA;AACA;;;;;;;;;;;AAGA;AACA;AARA;;;;;;;;AAUO,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG;AACzC,IAAI;AACJ,SAAS;IACP,wCAAmC;QACjC,yCAAyC;QACzC,OAAO,IAAA,6KAAe;IACxB;;;AAOF;AACA,SAAS;IACP,MAAM,OAAO,CAAC;QACZ;;QACA;IACF,CAAC;IACD,OAAO,GAAG,KAAK,SAAS,CAAC;AAC3B;AAEO,SAAS,kBACd,KAEE;IAEF,uEAAuE;IACvE,oEAAoE;IACpE,wEAAwE;IACxE,uDAAuD;IACvD,MAAM,cAAc;IACpB,MAAM,CAAC,WAAW,GAAG,IAAA,6OAAQ,EAAC,IAC5B,iBAA4B;YAC1B,OAAO;gBACL,cAAc;oBACZ,aAAa,qJAAS;oBACtB,KAAK;gBACP;aACD;QACH;IAEF,qBACE,0QAAC,yOAAmB;QAAC,QAAQ;kBAC3B,cAAA,0QAAC;YAAa,YAAY;YAAY,aAAa;sBAChD,MAAM,QAAQ;;;;;;;;;;;AAIvB","debugId":null}}]
}